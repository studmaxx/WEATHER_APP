{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\Tutorial\\\\weather-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './app_component/weather.component'; //api call to \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"e783e94c7662e09c899f628e856b5532\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = async () => {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`);\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celcius: this.calCelcius(response.main.temp),\n        temp_max: this.calCelcius(response.main.temp_max),\n        temp_min: this.calCelcius(response.main.temp_min),\n        description: response.weather[0].description\n      });\n      this.get_WeatherIcon();\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.getWeather();\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelcius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeID === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Weather, {\n        city: this.state.city,\n        country: this.state.country,\n        temp_celsius: this.state.celcius,\n        temp_max: this.state.temp_max,\n        temp_min: this.state.temp_min,\n        description: this.state.description,\n        \"weather-icon\": this.state.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/asus/Desktop/Tutorial/weather-app/src/App.js"],"names":["React","Weather","API_key","App","Component","constructor","props","getWeather","api_call","fetch","response","json","console","log","setState","city","name","country","sys","celcius","calCelcius","main","temp","temp_max","temp_min","description","weather","get_WeatherIcon","state","undefined","icon","error","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cell","Math","floor","icons","rangeID","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './app_component/weather.component';\n\n//api call to \nconst API_key=\"e783e94c7662e09c899f628e856b5532\"\n\nclass App extends React.Component{\n  constructor(props) \n  {\n    super(props)\n    this.state = {\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celcius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description: \"\",\n      error:false \n       }\n    this.getWeather()\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\n  calCelcius(temp){\n    let cell=Math.floor(temp-273.15)\n    return cell\n  }\n\n  get_WeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm})\n        break;\n        case rangeID>=300 && rangeID<=321:\n        this.setState({icon:this.weatherIcon.Drizzle})\n        break;\n        case rangeID>=500 && rangeID<=531:\n        this.setState({icon:this.weatherIcon.Rain})\n        break;\n        case rangeID>=600 && rangeID<=622:\n        this.setState({icon:this.weatherIcon.Snow})\n        break;\n        case rangeID>=701 && rangeID<=781:\n        this.setState({icon:this.weatherIcon.Atmosphere})\n        break;\n        case rangeID === 800:\n        this.setState({icon:this.weatherIcon.Clear})\n        break;\n        case rangeID>=801 && rangeID<=804:\n        this.setState({icon:this.weatherIcon.Clouds})\n        break;\n        default:\n          this.setState({icon:this.weatherIcon.Clouds})\n\n    }\n  }\n\n  getWeather=async() =>{\n    const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`)\n    const response=await api_call.json()\n    console.log(response)\n    this.setState({\n      city:response.name,\n      country:response.sys.country,\n      celcius:this.calCelcius(response.main.temp),\n      temp_max:this.calCelcius(response.main.temp_max),\n      temp_min:this.calCelcius(response.main.temp_min),\n      description:response.weather[0].description\n    })\n    this.get_WeatherIcon()\n  }\n  render(){\n    return( <div className=\"App\">\n    <Weather \n    city={this.state.city} \n    country={this.state.country}\n    temp_celsius={this.state.celcius}\n    temp_max={this.state.temp_max}\n    temp_min={this.state.temp_min}\n    description={this.state.description}\n    weather-icon={this.state.icon}\n    />\n  </div>)\n  } \n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}